// use convert_case::{Case, Casing};
use std::env;
use std::path::PathBuf;

fn main() {
    let lib = pkg_config::Config::new()
        .atleast_version("1.16.2")
        .probe("chafa")
        .expect("pkg-config: Lib `chafa` not found.");

    let bindings = bindgen::Builder::default()
        .header("wrapper.h")
        .clang_args(
            lib.include_paths
                .iter()
                .map(|p| format!("-I{}", p.display())),
        )
        .generate()
        .expect("bindgen: Failed to generate bindings.");

    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
    bindings
        .write_to_file(out_path.join("bindings.rs"))
        .expect("bindgen: Failed to write bindings.");

    // Generate values for `ChafaTermSeq` enum:
    // TODO: Come up with a better solution that's not slow to build
    // and doesn't mess up with the LSP.

    // let mut term_seq_variants = String::new();
    //
    // const GEN_STR: &str = "/*\n * This file was generated by build.rs\n */\n\n";
    // term_seq_variants.push_str(GEN_STR);
    //
    // term_seq_variants.push_str("gen_termseq! {\n");
    //
    // for line in bindings.to_string().lines() {
    //     if line.starts_with("pub const ChafaTermSeq_CHAFA_TERM_SEQ_") {
    //         let name_end = line[9..].find(':').unwrap();
    //
    //         let const_name = line[9..9 + name_end].trim().to_string();
    //         let value_name = const_name
    //             .strip_prefix("ChafaTermSeq_CHAFA_TERM_SEQ_")
    //             .map(|s| s.to_string())
    //             .unwrap();
    //
    //         term_seq_variants.push_str(
    //             format!(
    //                 "    {} = ffi::{},\n",
    //                 value_name.to_case(Case::Pascal),
    //                 const_name
    //             )
    //             .as_str(),
    //         );
    //     }
    // }
    // term_seq_variants.push_str("}\n\n");
    // term_seq_variants.push_str(GEN_STR);
    //
    // let term_seq_path = std::path::Path::new(
    //     &std::env::var("CARGO_MANIFEST_DIR").expect("CARGO_MANIFEST_DIR not set"),
    // )
    // .join("src/term/term_seq.rs");
    // std::fs::write(term_seq_path, term_seq_variants).unwrap();
}
